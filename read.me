# 🌈 Sistema de Agendamento de Serviços - Núcleo AMADO (Unijorge)

Este projeto tem como objetivo criar um sistema web para o Núcleo AMADO da Unijorge, oferecendo à comunidade LGBTQIAP+ uma plataforma de **acolhimento** e **agendamento de atendimentos** como apoio psicológico, jurídico e social.

## 🎯 Objetivo

Desenvolver um sistema WEB completo (Frontend + Backend + Banco de Dados) com no mínimo 7 telas, que permita:
- Cadastro e login de usuários
- Visualização de serviços disponíveis
- Agendamento de atendimentos
- Acompanhamento e cancelamento de agendamentos
- Contato com o núcleo AMADO

---

## 🖥️ Tecnologias Utilizadas

### Frontend
- HTML, CSS, JavaScript
- (ou) React.js com Tailwind CSS

### Backend
- Node.js
- Express.js

### Banco de Dados
- MySQL

---

## 🧱 Estrutura do Banco de Dados

### Tabelas:
- `usuarios (id, nome, email, senha)`
- `servicos (id, nome, descricao)`
- `agendamentos (id, id_usuario, id_servico, data, hora, status)`

---

## 📋 Telas do Projeto (mínimo de 7)

| Nº | Tela | Descrição |
|----|------|-----------|
| 1 | Login / Cadastro | Formulário para login de usuários e criação de novas contas |
| 2 | Dashboard do Usuário | Tela principal com boas-vindas, serviços e botões de ação |
| 3 | Serviços Disponíveis | Lista de serviços (Psicologia, Jurídico, Enfermagem, etc) |
| 4 | Novo Agendamento | Formulário para selecionar serviço, data e hora |
| 5 | Meus Agendamentos | Lista dos agendamentos com opção de cancelar ou editar |
| 6 | Contato / Suporte | Formulário de contato ou informações para dúvidas |
| 7 | Admin (opcional) | Painel para gerenciar serviços e visualizar agendamentos |

---

## 🚧 Funcionalidades do Sistema

- [ ] Cadastro de usuário com validação
- [ ] Login com autenticação
- [ ] Listagem de serviços disponíveis
- [ ] Agendamento de atendimentos
- [ ] Listagem dos agendamentos do usuário
- [ ] Cancelamento ou edição de agendamento
- [ ] Tela de contato com formulário
- [ ] (Opcional) Painel administrativo

---

## 🚀 Etapas de Desenvolvimento

1. Criar banco de dados e tabelas com MySQL
2. Desenvolver rotas da API com Node.js e Express
3. Testar rotas usando Postman
4. Criar as telas com React.js (ou HTML + JS)
5. Integrar frontend com backend usando fetch ou axios
6. Criar funcionalidades completas de agendamento
7. Criar tela de contato e painel administrativo
8. Realizar testes e ajustes finais
9. Documentar o projeto com prints e instruções

---

## 📂 Estrutura de Pastas (sugestão)

